import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Users } from '../../../entities/users.entity';
import { Templates } from '../../../entities/templates.entity';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI, ChatSession } from '@google/generative-ai';

@Injectable()
export class AI_Service {
        private readonly genAI;
        private readonly mintoContext: string;
        private chatSession: ChatSession | null = null;

        constructor(
                @InjectRepository(Users)
                private readonly userRepository: Repository<Users>,
                @InjectRepository(Templates)
                private readonly templateRepository: Repository<Templates>,
                private readonly configService: ConfigService
        ) {
                const apiKey = this.configService.get<string>('GEMINI_API_KEY');
                if (!apiKey) {
                        throw new Error('GEMINI_API_KEY is not defined in .env');
                }

                this.genAI = new GoogleGenerativeAI(apiKey);

                this.mintoContext = `
      B·∫°n l√† Minto Bot, m·ªôt tr·ª£ l√Ω ·∫£o gi√∫p ng∆∞·ªùi d√πng hi·ªÉu v·ªÅ website Minto - n·ªÅn t·∫£ng ƒë·∫∑t thi·ªáp c∆∞·ªõi Online. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu t·ª± tin, th√¢n thi·ªán, t·ª± nhi√™n nh∆∞ con ng∆∞·ªùi, nh∆∞ng ch·ªâ s·ª≠ d·ª•ng c√¢u ch√†o "Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n." khi ng·ªØ c·∫£nh y√™u c·∫ßu gi·ªõi thi·ªáu. Tr√°nh l·∫∑p l·∫°i c√¢u ch√†o n√†y trong c√°c ph·∫£n h·ªìi. D·ª±a tr√™n c√°c th√¥ng tin sau:
      - ƒêi·ªÉm m·∫°nh c·ªßa Minto:
        + Template thi·ªáp c∆∞·ªõi c√≥ s·∫µn, d·ªÖ s·ª≠ d·ª•ng, linh ho·∫°t ƒë·ªÉ t√πy ch·ªânh.
        + T·∫°o th·∫ª nh·∫≠n h·ª∑ nhanh ch√≥ng.
        + Ti·ªÅn nh·∫≠n h·ª∑ qua QR code ri√™ng, kh√°ch m·ªùi qu√©t QR, ti·ªÅn g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn c√¥ d√¢u ch√∫ r·ªÉ, kh√¥ng qua trung gian.
      - Admin: 
                + Hu·ª≥nh Nam, 
                + Zalo: 0333 xxxx 892. 
      - K√™nh TikTok: https://www.tiktok.com/@minto_wedding?_t=ZS-8ye0pryjhSL&_r=1.
      - Minto lu√¥n √°p d·ª•ng gi·∫£m 5% cho t·∫•t c·∫£ t√†i kho·∫£n l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng. ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c √°p d·ª•ng l√† 7 ng√†y k·ªÉ t·ª´ ng√†y ƒëƒÉng k√≠ t√†i kho·∫£n.
      - Thi·ªáp c∆∞·ªõi khi thanh to√°n xong th√¨: h·ªá th·ªëng s·∫Ω t·∫°o ra ph·∫ßn danh s√°ch trong ƒë√≥ c√≥ to√†n b·ªô link m·ªùi cho kh√°ch m·ªùi ƒë√£ th√™m.
      - Xem l·∫°i link ·ªü ƒë√¢u? V√†o ph·∫ßn t√†i kho·∫£n, t·∫°i ƒë∆°n h√†ng ƒë√£ thanh to√°n c√≥ n√∫t danh s√°ch kh√°ch m·ªùi. Ho·∫∑c v√†o L·ªãch s·ª≠ thanh to√°n tr√™n g√≥c ph·∫£i m√†n h√¨nh.
      - M·ªçi th·∫Øc m·∫Øc li√™n h·ªá v·ªõi Admin Hu·ª≥nh Nam (Dev) qua Zalo 0333 xxxx 892.
      - H·ªá th·ªëng kh√¥ng cho ph√©p ch·ªânh s·ª≠a tr√™n c√°c m·∫´u c√≥ s·∫µn, h·ªá th·ªëng ch·ªâ cung c·∫•p c√°c m·∫´u c√≥ s·∫µn, r·ªìi ƒë√≥ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p n·ªôi dung v√† ch·ªçn h√¨nh ·∫£nh y√™u th√≠ch tr·ª±c ti·∫øp tr√™n m·∫´u c√≥ s·∫µn ƒë√≥.
      - H·ª©a h·∫πn t∆∞∆°ng lai: Nh·ªØng g√¨ ch∆∞a c√≥ s·∫Ω ƒëang n·∫±m t√≠nh nƒÉng ph√°t tri·ªÉn trong t∆∞∆°ng lai.
      - C√°ch l·∫•y t·ªça ƒë·ªô b·∫£n ƒë·ªì: N·∫øu ng∆∞·ªùi d√πng cung c·∫•p URL Google Maps, b·∫°n s·∫Ω tr√≠ch xu·∫•t t·ªça ƒë·ªô t·ª´ URL (n·∫øu c√≥) v√† tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng (latitude, longitude). N·∫øu kh√¥ng, h√£y h∆∞·ªõng d·∫´n theo c√°c b∆∞·ªõc sau:
        Tr√™n m√°y t√≠nh:
        1. M·ªü Google Maps.
        2. T√¨m ƒë·ªãa ƒëi·ªÉm c·∫ßn l·∫•y t·ªça ƒë·ªô.
        3. Nh·∫•p chu·ªôt ph·∫£i v√†o ƒë·ªãa ƒëi·ªÉm ‚Üí T·ªça ƒë·ªô s·∫Ω hi·ªán ·ªü d√≤ng ƒë·∫ßu ti√™n. Sao ch√©p v√† s·ª≠ d·ª•ng.
        Tr√™n ƒëi·ªán tho·∫°i:
        1. M·ªü ·ª©ng d·ª•ng Google Maps.
        2. T√¨m ƒë·ªãa ƒëi·ªÉm.
        3. Nh·∫•n gi·ªØ l√™n ƒë·ªãa ƒëi·ªÉm cho ƒë·∫øn khi hi·ªán ghim ƒë·ªè.
        4. Vu·ªët th√¥ng tin l√™n ƒë·ªÉ th·∫•y t·ªça ƒë·ªô v√† sao ch√©p.

      - N·∫øu v·∫•n ƒë·ªÅ l·ªói (nh∆∞ ƒë∆°n h√†ng, thanh to√°n,...), ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫•p v√†o icon support ƒë·ªÉ g·ª≠i m√£ l·ªói, ho·∫∑c li√™n h·ªá Zalo Admin ƒë·ªÉ gi·∫£i quy·∫øt nhanh.
      - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªë l∆∞·ª£ng template: Tr·∫£ l·ªùi d·ª±a tr√™n s·ªë l∆∞·ª£ng template c√≥ trong h·ªá th·ªëng.
      - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªü th√≠ch thi·ªáp c∆∞·ªõi: T√¨m template ph√π h·ª£p d·ª±a tr√™n t√™n, m√¥ t·∫£, v√† gi√° (n·∫øu ng∆∞·ªùi d√πng cung c·∫•p ng√¢n s√°ch).
    `.trim();

                this.listAvailableModels().catch((error) => {
                        console.error('[GoogleGenerativeAI] Error listing models:', error.message);
                });

                this.initChatSession();
        }

        async listAvailableModels(): Promise<void> {
                try {
                        const apiKey = this.configService.get<string>('GEMINI_API_KEY');
                        const response = await fetch(
                                `https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`,
                                {
                                        method: 'GET',
                                }
                        );

                        if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(
                                        `HTTP ${response.status}: ${JSON.stringify(errorData)}`
                                );
                        }

                        const data = await response.json();
                        console.log(
                                '[GoogleGenerativeAI] Available models:',
                                JSON.stringify(data, null, 2)
                        );
                } catch (error) {
                        console.error('[GoogleGenerativeAI] Error listing models:', error.message);
                }
        }

        private async initChatSession() {
                const model = this.genAI.getGenerativeModel({
                        model: 'gemini-2.0-flash',
                        generationConfig: {
                                maxOutputTokens: 1000,
                        },
                });

                this.chatSession = model.startChat({
                        history: [
                                {
                                        role: 'user',
                                        parts: [{ text: this.mintoContext }],
                                },
                                {
                                        role: 'model',
                                        parts: [
                                                {
                                                        text: 'Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n.',
                                                },
                                        ],
                                },
                        ],
                });
        }

        private extractCoordinatesFromUrl(url: string): [number, number] | null {
                try {
                        const coordRegex = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
                        const altCoordRegex = /!3d(-?\d+\.\d+)!4d(-?\d+\.\d+)/;
                        const match = url.match(coordRegex) || url.match(altCoordRegex);
                        if (match && match.length >= 3) {
                                const lat = parseFloat(match[1]);
                                const lng = parseFloat(match[2]);
                                return isNaN(lat) || isNaN(lng) ? null : [lat, lng];
                        }
                        return null;
                } catch (error) {
                        return null;
                }
        }

        private formatResponse(text: string): string {
                const emojiFriendly = [
                        { keywords: ['th√†nh c√¥ng', 'ƒë·∫πp', 'vui', 'ph√π h·ª£p'], icon: 'üòä' },
                        { keywords: ['kh√¥ng t√¨m th·∫•y', 'l·ªói', 'kh√¥ng h·ª£p'], icon: 'üòî' },
                ];
                let emoji = '';
                for (const item of emojiFriendly) {
                        if (item.keywords.some((k) => text.toLowerCase().includes(k))) {
                                emoji = item.icon;
                                break;
                        }
                }
                return (
                        emoji +
                        ' ' +
                        text.replace(/\*\*/g, '\n-').replace(/\n-/g, '\n- ').trim()
                ).trim();
        }

        private wrapUrlsInAnchorTags(text: string): string {
                const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
                return text.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
        }

        private removeDuplicateGreeting(text: string): string {
                const greeting = 'Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n.';
                return text.includes(greeting)
                        ? text.replace(new RegExp(greeting, 'gi'), '').trim() || text
                        : text;
        }

        private async getTemplateCount(): Promise<number> {
                return await this.templateRepository.count();
        }

        private async findAllTemplates(): Promise<Templates[]> {
                return await this.templateRepository.find({
                        where: { status: 'S·∫µn s√†ng' },
                        order: { template_id: 'ASC' },
                });
        }

        private async findMatchingTemplates(
                preferences: string,
                budget?: number
        ): Promise<Templates[]> {
                const allTemplates = await this.findAllTemplates();
                const cleanedPref = preferences.trim().toLowerCase();

                // T√¨m exact ho·∫∑c partial match trong name tr∆∞·ªõc
                const strongMatches = allTemplates.filter((t) =>
                        (t.name || '').toLowerCase().includes(cleanedPref)
                );

                if (strongMatches.length > 0) {
                        return strongMatches.map((template) => ({
                                ...template,
                                features: [template.description?.split(',')[0] || 'Kh√¥ng c√≥ m√¥ t·∫£'],
                                imageUrl: template.image_url || '',
                        }));
                }

                // N·∫øu kh√¥ng t√¨m ƒë∆∞·ª£c match r√µ r√†ng, fallback sang t√¨m theo keyword m√¥ t·∫£ + ng√¢n s√°ch
                const keywords = cleanedPref.split(/\s+/).filter((word) => word.length > 2);

                const scoredTemplates = allTemplates.map((template) => {
                        const name = (template.name || '').toLowerCase();
                        const description = (template.description || '').toLowerCase();
                        const keywordMatchesInName = keywords.filter((k) =>
                                name.includes(k)
                        ).length;
                        const keywordMatchesInDesc = keywords.filter((k) =>
                                description.includes(k)
                        ).length;
                        const budgetScore =
                                !budget || (template.price !== null && template.price <= budget)
                                        ? 1
                                        : 0;
                        const totalScore =
                                keywordMatchesInName * 2 + keywordMatchesInDesc + budgetScore;

                        return { ...template, _score: totalScore };
                });

                return scoredTemplates
                        .filter((t) => t._score > 0)
                        .sort((a, b) => b._score - a._score)
                        .slice(0, 3)
                        .map((template) => ({
                                ...template,
                                features: [template.description?.split(',')[0] || 'Kh√¥ng c√≥ m√¥ t·∫£'],
                                imageUrl: template.image_url || '',
                        }));
        }

        async answerAsMintoBot(question: string): Promise<string | Templates[]> {
                try {
                        const googleMapsRegex = /https?:\/\/(www\.)?google\.com\/maps\/[^\s<]+/;
                        const urlMatch = question.match(googleMapsRegex);

                        if (urlMatch) {
                                const url = urlMatch[0];
                                const coordinates = this.extractCoordinatesFromUrl(url);
                                if (coordinates) {
                                        const [lat, lng] = coordinates;
                                        const response = `T·ªça ƒë·ªô t·ª´ link b·∫°n cung c·∫•p l√† (${lat}, ${lng}). B·∫°n mu·ªën m√¨nh h·ªó tr·ª£ g√¨ th√™m v·ªÅ thi·ªáp c∆∞·ªõi ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√¥ng nha? üòä`;
                                        return this.wrapUrlsInAnchorTags(response);
                                } else {
                                        const response = `
Link b·∫°n g·ª≠i kh√¥ng ch·ª©a t·ªça ƒë·ªô r√µ r√†ng. H√£y th·ª≠ g·ª≠i l·∫°i link Google Maps ƒë√∫ng ƒë·ªãnh d·∫°ng (ch·ª©a @lat,lng ho·∫∑c !3dlat!4dlng), ho·∫∑c l√†m theo c√°ch sau:
**Tr√™n m√°y t√≠nh (PC):** M·ªü Google Maps, t√¨m ƒë·ªãa ƒëi·ªÉm, nh·∫•n chu·ªôt ph·∫£i ƒë·ªÉ l·∫•y t·ªça ƒë·ªô.
**Tr√™n ƒëi·ªán tho·∫°i:** T√¨m v·ªã tr√≠, gi·ªØ ghim tr√™n m√†n h√¨nh ƒë·ªÉ xem t·ªça ƒë·ªô.
N·∫øu c·∫ßn, g·ª≠i link m·ªõi, m√¨nh s·∫Ω gi√∫p nh√©! üòä
          `;
                                        return this.wrapUrlsInAnchorTags(
                                                this.formatResponse(response)
                                        );
                                }
                        }

                        if (
                                question.toLowerCase().includes('s·ªë l∆∞·ª£ng template') ||
                                question.toLowerCase().includes('bao nhi√™u template')
                        ) {
                                const count = await this.getTemplateCount();
                                const response = `Hi·ªán t·∫°i, Minto c√≥ **${count} template** thi·ªáp c∆∞·ªõi s·∫µn s√†ng cho b·∫°n l·ª±a ch·ªçn! üòä B·∫°n mu·ªën m√¨nh g·ª£i √Ω m·∫´u n√†o ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n kh√¥ng?`;
                                return this.wrapUrlsInAnchorTags(this.formatResponse(response));
                        }

                        const preferenceKeywords = [
                                'gu',
                                's·ªü th√≠ch',
                                'phong c√°ch',
                                'thi·ªáp c∆∞·ªõi',
                                'm·∫´u thi·ªáp',
                        ];
                        const hasPreference = preferenceKeywords.some((keyword) =>
                                question.toLowerCase().includes(keyword)
                        );
                        const budgetMatch = question.match(
                                /ng√¢n s√°ch|gi√°|kho·∫£ng (\d+)(?:\s*(?:tri·ªáu|ngh√¨n|k))?/i
                        );
                        let budget: number | undefined;

                        if (budgetMatch && budgetMatch[1]) {
                                budget = parseFloat(budgetMatch[1]);
                                if (budgetMatch[0].toLowerCase().includes('tri·ªáu')) {
                                        budget *= 1000000;
                                } else if (
                                        budgetMatch[0].toLowerCase().includes('ngh√¨n') ||
                                        budgetMatch[0].toLowerCase().includes('k')
                                ) {
                                        budget *= 1000;
                                }
                        }

                        if (hasPreference) {
                                const templates = await this.findMatchingTemplates(
                                        question,
                                        budget
                                );
                                if (templates.length > 0) {
                                        return templates;
                                } else {
                                        const response = `
Kh√¥ng t√¨m th·∫•y template n√†o ph√π h·ª£p v·ªõi s·ªü th√≠ch b·∫°n m√¥ t·∫£. üòî B·∫°n c√≥ th·ªÉ th·ª≠ m√¥ t·∫£ chi ti·∫øt h∆°n (v√≠ d·ª•: phong c√°ch hi·ªán ƒë·∫°i, c·ªï ƒëi·ªÉn, t·ªëi gi·∫£n, ho·∫∑c gi√° ti·ªÅn mong mu·ªën c·ª• th·ªÉ).
          `;
                                        return this.wrapUrlsInAnchorTags(
                                                this.formatResponse(response)
                                        );
                                }
                        }

                        if (!this.chatSession) {
                                await this.initChatSession();
                        }

                        const result = await this.chatSession.sendMessage(question);
                        const response = await result.response;
                        let finalText = response.text();

                        finalText = this.removeDuplicateGreeting(finalText);
                        finalText = this.formatResponse(finalText);
                        finalText = this.wrapUrlsInAnchorTags(finalText);

                        return finalText;
                } catch (error) {
                        console.error('Gemini API Error:', error);
                        throw new BadRequestException('Error calling Gemini API: ' + error.message);
                }
        }
}
