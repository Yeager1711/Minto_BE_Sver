import { BadRequestException, Injectable } from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Users } from '../../../entities/users.entity';
import { Templates } from '../../../entities/templates.entity';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI, ChatSession } from '@google/generative-ai';

@Injectable()
export class AI_Service {
        private readonly genAI;
        private readonly mintoContext: string;
        private chatSession: ChatSession | null = null;

        constructor(
                @InjectRepository(Users)
                private readonly userRepository: Repository<Users>,
                @InjectRepository(Templates)
                private readonly templateRepository: Repository<Templates>,
                private readonly configService: ConfigService
        ) {
                const apiKey = this.configService.get<string>('GEMINI_API_KEY');
                if (!apiKey) {
                        throw new Error('GEMINI_API_KEY is not defined in .env');
                }

                this.genAI = new GoogleGenerativeAI(apiKey);

                this.mintoContext = `
      B·∫°n l√† Minto Bot, m·ªôt tr·ª£ l√Ω ·∫£o gi√∫p ng∆∞·ªùi d√πng hi·ªÉu v·ªÅ website Minto - n·ªÅn t·∫£ng ƒë·∫∑t thi·ªáp c∆∞·ªõi Online. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu t·ª± tin, th√¢n thi·ªán, t·ª± nhi√™n nh∆∞ con ng∆∞·ªùi, nh∆∞ng ch·ªâ s·ª≠ d·ª•ng c√¢u ch√†o "Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n." khi ng·ªØ c·∫£nh y√™u c·∫ßu gi·ªõi thi·ªáu. Tr√°nh l·∫∑p l·∫°i c√¢u ch√†o n√†y trong c√°c ph·∫£n h·ªìi. D·ª±a tr√™n c√°c th√¥ng tin sau:
      - ƒêi·ªÉm m·∫°nh c·ªßa Minto:
        + Template thi·ªáp c∆∞·ªõi c√≥ s·∫µn, d·ªÖ s·ª≠ d·ª•ng, linh ho·∫°t ƒë·ªÉ t√πy ch·ªânh.
        + T·∫°o th·∫ª nh·∫≠n h·ª∑ nhanh ch√≥ng.
        + Ti·ªÅn nh·∫≠n h·ª∑ qua QR code ri√™ng, kh√°ch m·ªùi qu√©t QR, ti·ªÅn g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn c√¥ d√¢u ch√∫ r·ªÉ, kh√¥ng qua trung gian.
        + Kh√°ch h√†ng h∆∞·ªõng ƒë·∫øn: Gi·ªõi tr·∫ª, ho·∫∑c kh√°ch h√†ng c·∫ßn s·ª± tr·∫ª trung, m·ªõi l·∫°.

      - Admin:
                + Hu·ª≥nh Nam,
                + Zalo: 0333 xxxx 892.
      - K√™nh TikTok: https://www.tiktok.com/@minto_wedding?_t=ZS-8ye0pryjhSL&_r=1.

      - Minto lu√¥n √°p d·ª•ng gi·∫£m 5% cho t·∫•t c·∫£ t√†i kho·∫£n l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng. ƒëi·ªÅu ki·ªán ƒë∆∞·ª£c √°p d·ª•ng l√† 7 ng√†y k·ªÉ t·ª´ ng√†y ƒëƒÉng k√≠ t√†i kho·∫£n.

      - Thi·ªáp c∆∞·ªõi khi thanh to√°n xong th√¨: h·ªá th·ªëng s·∫Ω t·∫°o ra ph·∫ßn danh s√°ch trong ƒë√≥ c√≥ to√†n b·ªô link m·ªùi cho kh√°ch m·ªùi ƒë√£ th√™m.

      - Xem l·∫°i link ·ªü ƒë√¢u? V√†o ph·∫ßn t√†i kho·∫£n, t·∫°i ƒë∆°n h√†ng ƒë√£ thanh to√°n c√≥ n√∫t danh s√°ch kh√°ch m·ªùi. Ho·∫∑c v√†o L·ªãch s·ª≠ thanh to√°n tr√™n g√≥c ph·∫£i m√†n h√¨nh.

      - H·ªá th·ªëng kh√¥ng cho ph√©p ch·ªânh s·ª≠a tr√™n c√°c m·∫´u c√≥ s·∫µn, h·ªá th·ªëng ch·ªâ cung c·∫•p c√°c m·∫´u c√≥ s·∫µn, r·ªìi ƒë√≥ ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫≠p n·ªôi dung v√† ch·ªçn h√¨nh ·∫£nh y√™u th√≠ch tr·ª±c ti·∫øp tr√™n m·∫´u c√≥ s·∫µn ƒë√≥.

      - H·ª©a h·∫πn t∆∞∆°ng lai: Nh·ªØng g√¨ ch∆∞a c√≥ s·∫Ω ƒëang n·∫±m t√≠nh nƒÉng ph√°t tri·ªÉn trong t∆∞∆°ng lai.

      - C√°ch l·∫•y t·ªça ƒë·ªô b·∫£n ƒë·ªì: N·∫øu ng∆∞·ªùi d√πng cung c·∫•p URL Google Maps, b·∫°n s·∫Ω tr√≠ch xu·∫•t t·ªça ƒë·ªô t·ª´ URL (n·∫øu c√≥) v√† tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng (latitude, longitude). N·∫øu kh√¥ng, h√£y h∆∞·ªõng d·∫´n theo c√°c b∆∞·ªõc sau:
        Tr√™n m√°y t√≠nh:
        1. M·ªü Google Maps.
        2. T√¨m ƒë·ªãa ƒëi·ªÉm c·∫ßn l·∫•y t·ªça ƒë·ªô.
        3. Nh·∫•p chu·ªôt ph·∫£i v√†o ƒë·ªãa ƒëi·ªÉm ‚Üí T·ªça ƒë·ªô s·∫Ω hi·ªán ·ªü d√≤ng ƒë·∫ßu ti√™n. Sao ch√©p v√† s·ª≠ d·ª•ng.
        Tr√™n ƒëi·ªán tho·∫°i:
        1. M·ªü ·ª©ng d·ª•ng Google Maps.
        2. T√¨m ƒë·ªãa ƒëi·ªÉm.
        3. Nh·∫•n gi·ªØ l√™n ƒë·ªãa ƒëi·ªÉm cho ƒë·∫øn khi hi·ªán ghim ƒë·ªè.
        4. Vu·ªët th√¥ng tin l√™n ƒë·ªÉ th·∫•y t·ªça ƒë·ªô v√† sao ch√©p.

      - N·∫øu v·∫•n ƒë·ªÅ l·ªói (nh∆∞ ƒë∆°n h√†ng, thanh to√°n,...), ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫•p v√†o icon support ƒë·ªÉ g·ª≠i m√£ l·ªói, ho·∫∑c li√™n h·ªá Zalo Admin ƒë·ªÉ gi·∫£i quy·∫øt nhanh.

      - Khi thanh to√°n xong (n·∫øu l·ªói ph·∫ßn n√†y, h·ªèi kh√°ch h√†ng ƒë√£ nh·∫•n n√∫t Ho√†n Th√†nh ch∆∞a) => ƒë∆∞a ra h∆∞·ªõng gi·∫£i quy·∫øt h·ªá th·ªëng c√≥ n√∫t Ho√†n Th√†nh, nh·∫•n v√†o n√∫t ƒë·ªÉ danh s√°ch c≈©ng nh∆∞ th√¥ng tin tr∆∞·ªõc ƒë√≥ ƒë∆∞·ª£c l∆∞u l·∫°i. 

      - C√≥ c√°ch n√†o quay l·∫°i nh·∫•n n√∫t ho√†n th√†nh kh√¥ng ? [Kh√¥ng c√≥ c√°ch], v√¨ trong ph·∫ßn [h∆∞·ªõng d·∫´n] ƒë√£ c√≥ t·∫•t c·∫£ n√™n ch·ªâ li√™n h·ªá v·ªõi Admin ƒë·ªÉ ƒë∆∞·ª£c h·ªó tr·ª£ nhanh nh·∫•t.

      - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªë l∆∞·ª£ng template: Tr·∫£ l·ªùi d·ª±a tr√™n s·ªë l∆∞·ª£ng template c√≥ trong h·ªá th·ªëng.
      
      - N·∫øu ng∆∞·ªùi d√πng h·ªèi v·ªÅ s·ªü th√≠ch thi·ªáp c∆∞·ªõi: T√¨m template ph√π h·ª£p d·ª±a tr√™n t√™n, m√¥ t·∫£, v√† gi√° (n·∫øu ng∆∞·ªùi d√πng cung c·∫•p ng√¢n s√°ch).
    `.trim();

                this.listAvailableModels().catch((error) => {
                        console.error('[GoogleGenerativeAI] Error listing models:', error.message);
                });

                this.initChatSession();
        }

        async listAvailableModels(): Promise<void> {
                try {
                        const apiKey = this.configService.get<string>('GEMINI_API_KEY');
                        const response = await fetch(
                                `https://generativelanguage.googleapis.com/v1beta/models?key=${apiKey}`,
                                {
                                        method: 'GET',
                                }
                        );

                        if (!response.ok) {
                                const errorData = await response.json();
                                throw new Error(
                                        `HTTP ${response.status}: ${JSON.stringify(errorData)}`
                                );
                        }

                        const data = await response.json();
                        console.log(
                                '[GoogleGenerativeAI] Available models:',
                                JSON.stringify(data, null, 2)
                        );
                } catch (error) {
                        console.error('[GoogleGenerativeAI] Error listing models:', error.message);
                }
        }

        private async initChatSession() {
                const model = this.genAI.getGenerativeModel({
                        model: 'gemini-2.0-flash',
                        generationConfig: {
                                maxOutputTokens: 500,
                        },
                });

                this.chatSession = model.startChat({
                        history: [
                                {
                                        role: 'user',
                                        parts: [{ text: this.mintoContext }],
                                },
                                {
                                        role: 'model',
                                        parts: [
                                                {
                                                        text: 'Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n.',
                                                },
                                        ],
                                },
                        ],
                });
        }

        private extractCoordinatesFromUrl(url: string): [number, number] | null {
                try {
                        const coordRegex = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
                        const altCoordRegex = /!3d(-?\d+\.\d+)!4d(-?\d+\.\d+)/;
                        const match = url.match(coordRegex) || url.match(altCoordRegex);
                        if (match && match.length >= 3) {
                                const lat = parseFloat(match[1]);
                                const lng = parseFloat(match[2]);
                                return isNaN(lat) || isNaN(lng) ? null : [lat, lng];
                        }
                        return null;
                } catch (error) {
                        return null;
                }
        }

        private formatResponse(text: string): string {
                const emojiFriendly = [
                        { keywords: ['th√†nh c√¥ng', 'ƒë·∫πp', 'vui', 'ph√π h·ª£p'], icon: 'üòä' },
                        { keywords: ['kh√¥ng t√¨m th·∫•y', 'l·ªói', 'kh√¥ng h·ª£p'], icon: 'üòî' },
                ];
                let emoji = '';
                for (const item of emojiFriendly) {
                        if (item.keywords.some((k) => text.toLowerCase().includes(k))) {
                                emoji = item.icon;
                                break;
                        }
                }
                return (
                        emoji +
                        ' ' +
                        text.replace(/\*\*/g, '\n-').replace(/\n-/g, '\n- ').trim()
                ).trim();
        }

        private wrapUrlsInAnchorTags(text: string): string {
                const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
                return text.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
        }

        private removeDuplicateGreeting(text: string): string {
                const greeting = 'Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n.';
                return text.includes(greeting)
                        ? text.replace(new RegExp(greeting, 'gi'), '').trim() || text
                        : text;
        }

        private async getTemplateCount(): Promise<number> {
                return await this.templateRepository.count();
        }

        private async findAllTemplates(): Promise<Templates[]> {
                return await this.templateRepository.find({
                        where: { status: 'S·∫µn s√†ng' },
                        order: { template_id: 'ASC' },
                });
        }

        // === NEW: parse user input to detect intent and extract "preferences" (no budget) ===
        private async parseTemplateRequest(
                userInput: string
        ): Promise<{ wantsTemplate: boolean; preferences: string }> {
                try {
                        const model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

                        const prompt = `
B·∫°n l√† m·ªôt h·ªá th·ªëng ph√¢n t√≠ch y√™u c·∫ßu t√¨m m·∫´u thi·ªáp c∆∞·ªõi.
Tr·∫£ v·ªÅ CH√çNH X√ÅC m·ªôt JSON c√≥ c·∫•u tr√∫c:
{
  "wantsTemplate": boolean,   // true n·∫øu ng∆∞·ªùi d√πng mu·ªën ƒë∆∞·ª£c g·ª£i √Ω template (c√¢u h·ªèi c√≥ √Ω ƒë·ªãnh t√¨m/so s√°nh/g·ª£i √Ω m·∫´u)
  "preferences": string       // m√¥ t·∫£ gu (m√†u, phong c√°ch, ch·ªß ƒë·ªÅ, c·∫£m x√∫c, t·ª´ kh√≥a...), r·ªóng n·∫øu kh√¥ng c√≥
}
**Ch·ªâ tr·∫£ JSON, KH√îNG gi·∫£i th√≠ch.**

V√≠ d·ª•:
"C√≥ m·∫´u thi·ªáp c·ªï ƒëi·ªÉn n√†o kh√¥ng?" => {"wantsTemplate": true, "preferences":"phong c√°ch c·ªï ƒëi·ªÉn"}
"M√¨nh th√≠ch m√†u pastel, t·ªëi gi·∫£n" => {"wantsTemplate": true, "preferences":"m√†u pastel, phong c√°ch t·ªëi gi·∫£n, nh·∫π nh√†ng"}
"B·∫°n c√≥ khuy·∫øn m√£i kh√¥ng?" => {"wantsTemplate": false, "preferences":""}
"Cho m√¨nh g·ª£i √Ω m·∫•y m·∫´u cho ƒë√°m c∆∞·ªõi bi·ªÉn" => {"wantsTemplate": true, "preferences":"ch·ªß ƒë·ªÅ bi·ªÉn, m√†u xanh, l√£ng m·∫°n"}

C√¢u c·∫ßn ph√¢n t√≠ch: "${userInput.replace(/\n/g, ' ')}"
`;

                        const result = await model.generateContent(prompt);
                        const raw = result?.response?.text ? result.response.text() : '';
                        const parsed = JSON.parse(raw);
                        return {
                                wantsTemplate: Boolean(parsed.wantsTemplate),
                                preferences: parsed.preferences
                                        ? String(parsed.preferences).trim()
                                        : '',
                        };
                } catch (err) {
                        // N·∫øu parse l·ªói, fallback: ƒë∆°n gi·∫£n detect m·ªôt s·ªë t·ª´ kh√≥a c∆° b·∫£n (ch·ªâ fallback)
                        console.warn(
                                '[parseTemplateRequest] fallback due to error:',
                                err?.message || err
                        );
                        const lower = (userInput || '').toLowerCase();
                        const fallbackWants =
                                /m·∫´u|thi·ªáp|g·ª£i √Ω|phong c√°ch|gu|s·ªü th√≠ch|c·ªï ƒëi·ªÉn|t·ªëi gi·∫£n|vintage|pastel|b√£i bi·ªÉn|bi·ªÉn|rustic|boho/.test(
                                        lower
                                );
                        return {
                                wantsTemplate: fallbackWants,
                                preferences: fallbackWants ? userInput : '',
                        };
                }
        }

        // === NEW: ask AI to pick up to 3 best templates from the DB list based on preferences ===
        private async findTemplatesWithAI(
                preferences: string
        ): Promise<Array<{ id?: number; name?: string; reason?: string }>> {
                try {
                        const templates = await this.findAllTemplates();
                        if (!templates || templates.length === 0) return [];

                        // Avoid sending extremely long lists to the model ‚Äî sample first N templates if DB large
                        const SAMPLE_LIMIT = 60;
                        const sample = templates.slice(0, SAMPLE_LIMIT);

                        const model = this.genAI.getGenerativeModel({ model: 'gemini-2.0-flash' });

                        const templateLines = sample
                                .map(
                                        (t) =>
                                                `- ID: ${t.template_id}, Name: ${t.name || 'Kh√¥ng t√™n'}, Description: ${t.description || 'Kh√¥ng c√≥ m√¥ t·∫£'}`
                                )
                                .join('\n');

                        const prompt = `
                        B·∫°n l√† h·ªá th·ªëng g·ª£i √Ω thi·ªáp c∆∞·ªõi. M·ª•c ti√™u: d·ª±a tr√™n m√¥ t·∫£ gu c·ªßa kh√°ch h√†ng, ch·ªçn t·ªëi ƒëa 3 m·∫´u t·ª´ danh s√°ch d∆∞·ªõi ƒë√¢y ph√π h·ª£p nh·∫•t.
                        Danh s√°ch template:
                        ${templateLines}

                        M√¥ t·∫£ gu kh√°ch h√†ng: "${preferences.replace(/\n/g, ' ')}"

                        Y√™u c·∫ßu:
                        1) So s√°nh d·ª±a tr√™n phong c√°ch, m√†u s·∫Øc ch·ªß ƒë·∫°o, ch·ªß ƒë·ªÅ v√† c·∫£m gi√°c t·ªïng th·ªÉ.
                        2) Tr·∫£ v·ªÅ m·ªôt m·∫£ng JSON g·ªìm t·ªëi ƒëa 3 ph·∫ßn t·ª≠, m·ªói ph·∫ßn t·ª≠ c√≥:
                        { "id": s·ªë, "name": "t√™n template", "reason": "ng·∫Øn g·ªçn l√Ω do t·∫°i sao ph√π h·ª£p" }
                        3) X·∫øp theo th·ª© t·ª± ph√π h·ª£p gi·∫£m d·∫ßn (ph·∫ßn t·ª≠ ƒë·∫ßu ph√π h·ª£p nh·∫•t).
                        4) Ch·ªâ tr·∫£ JSON, kh√¥ng gi·∫£i th√≠ch th√™m.

                        V√≠ d·ª• output:
                        [
                        { "id": 12, "name": "M·∫´u Pastel T·ªëi Gi·∫£n", "reason": "M√†u pastel, phong c√°ch t·ªëi gi·∫£n, nh·∫π nh√†ng" },
                        ...
                        ]
`;

                        const result = await model.generateContent(prompt);
                        const raw = result?.response?.text ? result.response.text() : '';
                        const parsed = JSON.parse(raw);

                        if (!Array.isArray(parsed)) return [];

                        // Normalize items
                        return parsed.slice(0, 3).map((it: any) => ({
                                id: typeof it.id === 'number' ? it.id : undefined,
                                name: it.name ? String(it.name) : undefined,
                                reason: it.reason ? String(it.reason) : undefined,
                        }));
                } catch (err) {
                        console.warn(
                                '[findTemplatesWithAI] AI selection failed, falling back. Error:',
                                err?.message || err
                        );
                        return [];
                }
        }

        // keep the original DB-text matching as fallback (keeps budget param optional)
        private async findMatchingTemplates(
                preferences: string,
                budget?: number
        ): Promise<Templates[]> {
                const allTemplates = await this.findAllTemplates();
                const cleanedPref = (preferences || '').trim().toLowerCase();
                if (!cleanedPref) return [];

                // exact/partial name match first
                const strongMatches = allTemplates.filter((t) =>
                        (t.name || '').toLowerCase().includes(cleanedPref)
                );
                if (strongMatches.length > 0) {
                        return strongMatches.map((template) => ({
                                ...template,
                                features: [template.description?.split(',')[0] || 'Kh√¥ng c√≥ m√¥ t·∫£'],
                                imageUrl: template.image_url || '',
                        }));
                }

                const keywords = cleanedPref.split(/\s+/).filter((w) => w.length > 2);
                const scoredTemplates = allTemplates.map((template) => {
                        const name = (template.name || '').toLowerCase();
                        const description = (template.description || '').toLowerCase();
                        const keywordMatchesInName = keywords.filter((k) =>
                                name.includes(k)
                        ).length;
                        const keywordMatchesInDesc = keywords.filter((k) =>
                                description.includes(k)
                        ).length;
                        const budgetScore =
                                !budget || (template.price !== null && template.price <= budget)
                                        ? 1
                                        : 0;
                        const totalScore =
                                keywordMatchesInName * 2 + keywordMatchesInDesc + budgetScore;
                        return { ...template, _score: totalScore };
                });

                return scoredTemplates
                        .filter((t) => t._score > 0)
                        .sort((a, b) => (b._score as number) - (a._score as number))
                        .slice(0, 3)
                        .map((template) => ({
                                ...template,
                                features: [template.description?.split(',')[0] || 'Kh√¥ng c√≥ m√¥ t·∫£'],
                                imageUrl: template.image_url || '',
                        }));
        }

        // === UPDATED: main entrypoint uses AI-based parsing + AI selection ===
        async answerAsMintoBot(question: string): Promise<string | Templates[]> {
                try {
                        const googleMapsRegex = /https?:\/\/(www\.)?google\.com\/maps\/[^\s<]+/;
                        const urlMatch = question.match(googleMapsRegex);

                        if (urlMatch) {
                                const url = urlMatch[0];
                                const coordinates = this.extractCoordinatesFromUrl(url);
                                if (coordinates) {
                                        const [lat, lng] = coordinates;
                                        const response = `T·ªça ƒë·ªô t·ª´ link b·∫°n cung c·∫•p l√† (${lat}, ${lng}). B·∫°n mu·ªën m√¨nh h·ªó tr·ª£ g√¨ th√™m v·ªÅ thi·ªáp c∆∞·ªõi ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√¥ng nha? üòä`;
                                        return this.wrapUrlsInAnchorTags(response);
                                } else {
                                        const response = `
Link b·∫°n g·ª≠i kh√¥ng ch·ª©a t·ªça ƒë·ªô r√µ r√†ng. H√£y th·ª≠ g·ª≠i l·∫°i link Google Maps ƒë√∫ng ƒë·ªãnh d·∫°ng (ch·ª©a @lat,lng ho·∫∑c !3dlat!4dlng), ho·∫∑c l√†m theo c√°ch sau:
**Tr√™n m√°y t√≠nh (PC):** M·ªü Google Maps, t√¨m ƒë·ªãa ƒëi·ªÉm, nh·∫•n chu·ªôt ph·∫£i ƒë·ªÉ l·∫•y t·ªça ƒë·ªô.
**Tr√™n ƒëi·ªán tho·∫°i:** T√¨m v·ªã tr√≠, gi·ªØ ghim tr√™n m√†n h√¨nh ƒë·ªÉ xem t·ªça ƒë·ªô.
N·∫øu c·∫ßn, g·ª≠i link m·ªõi, m√¨nh s·∫Ω gi√∫p nh√©! üòä
          `;
                                        return this.wrapUrlsInAnchorTags(
                                                this.formatResponse(response)
                                        );
                                }
                        }

                        // s·ªë l∆∞·ª£ng template
                        if (
                                question.toLowerCase().includes('s·ªë l∆∞·ª£ng template') ||
                                question.toLowerCase().includes('bao nhi√™u template') ||
                                question.toLowerCase().includes('s·ªë l∆∞·ª£ng template hi·ªán t·∫°i') ||
                                question.toLowerCase().includes('s·ªë l∆∞·ª£ng template hi·ªán c√≥')
                        ) {
                                const count = await this.getTemplateCount();
                                const response = `Hi·ªán t·∫°i, Minto c√≥ **${count} template** thi·ªáp c∆∞·ªõi s·∫µn s√†ng cho b·∫°n l·ª±a ch·ªçn! üòä B·∫°n mu·ªën m√¨nh g·ª£i √Ω m·∫´u n√†o ph√π h·ª£p v·ªõi s·ªü th√≠ch c·ªßa b·∫°n kh√¥ng?`;
                                return this.wrapUrlsInAnchorTags(this.formatResponse(response));
                        }

                        // parse budget if user provided (optional, gi·ªØ behavior c≈©)
                        const budgetMatch = question.match(
                                /ng√¢n s√°ch|gi√°|kho·∫£ng (\d+)(?:\s*(?:tri·ªáu|ngh√¨n|k))?/i
                        );
                        let budget: number | undefined;
                        if (budgetMatch && budgetMatch[1]) {
                                budget = parseFloat(budgetMatch[1]);
                                if (budgetMatch[0].toLowerCase().includes('tri·ªáu')) {
                                        budget *= 1000000;
                                } else if (
                                        budgetMatch[0].toLowerCase().includes('ngh√¨n') ||
                                        budgetMatch[0].toLowerCase().includes('k')
                                ) {
                                        budget *= 1000;
                                }
                        }

                        // AI determines intent + preferences
                        const { wantsTemplate, preferences } =
                                await this.parseTemplateRequest(question);

                        if (wantsTemplate) {
                                // ask AI to pick best templates from DB
                                const aiChoices = await this.findTemplatesWithAI(preferences);

                                const allTemplates = await this.findAllTemplates();
                                let pickedTemplates: Templates[] = [];

                                if (aiChoices.length > 0) {
                                        // preserve AI order
                                        for (const choice of aiChoices) {
                                                let found: Templates | undefined = undefined;
                                                if (choice.id !== undefined) {
                                                        found = allTemplates.find(
                                                                (t) => t.template_id === choice.id
                                                        );
                                                }
                                                if (!found && choice.name) {
                                                        const nameLower = choice.name.toLowerCase();
                                                        found = allTemplates.find((t) =>
                                                                (t.name || '')
                                                                        .toLowerCase()
                                                                        .includes(nameLower)
                                                        );
                                                }
                                                if (found) {
                                                        pickedTemplates.push({
                                                                ...found,
                                                                features: [
                                                                        found.description?.split(
                                                                                ','
                                                                        )[0] || 'Kh√¥ng c√≥ m√¥ t·∫£',
                                                                ],
                                                                imageUrl: found.image_url || '',
                                                        } as any);
                                                }
                                        }
                                }

                                // fallback: n·∫øu AI kh√¥ng tr·∫£ m·∫´u ho·∫∑c kh√¥ng kh·ªõp, d√πng findMatchingTemplates
                                if (pickedTemplates.length === 0) {
                                        const fallback = await this.findMatchingTemplates(
                                                preferences || question,
                                                budget
                                        );
                                        if (fallback && fallback.length > 0) {
                                                pickedTemplates = fallback;
                                        }
                                }

                                if (pickedTemplates.length > 0) {
                                        return pickedTemplates.slice(0, 3);
                                } else {
                                        const response = `
Kh√¥ng t√¨m th·∫•y template n√†o ph√π h·ª£p v·ªõi s·ªü th√≠ch b·∫°n m√¥ t·∫£. üòî B·∫°n c√≥ th·ªÉ th·ª≠ m√¥ t·∫£ chi ti·∫øt h∆°n (v√≠ d·ª•: phong c√°ch hi·ªán ƒë·∫°i, c·ªï ƒëi·ªÉn, t·ªëi gi·∫£n, ho·∫∑c cung c·∫•p m√†u ch·ªß ƒë·∫°o).
          `;
                                        return this.wrapUrlsInAnchorTags(
                                                this.formatResponse(response)
                                        );
                                }
                        }

                        // fallback to chat
                        if (!this.chatSession) {
                                await this.initChatSession();
                        }

                        const result = await this.chatSession.sendMessage(question);
                        const response = await result.response;
                        let finalText = response.text();

                        finalText = this.removeDuplicateGreeting(finalText);
                        finalText = this.formatResponse(finalText);
                        finalText = this.wrapUrlsInAnchorTags(finalText);

                        return finalText;
                } catch (error) {
                        console.error('Gemini API Error:', error);
                        throw new BadRequestException(
                                'Error calling Gemini API: ' + (error?.message || error)
                        );
                }
        }
}
