// ai.service.ts
import {
        BadRequestException,
        Injectable,
        NotFoundException,
        ConflictException,
        UnauthorizedException,
} from '@nestjs/common';
import { InjectRepository } from '@nestjs/typeorm';
import { Repository } from 'typeorm';
import { Users } from '../../../entities/users.entity';
import { ConfigService } from '@nestjs/config';
import { GoogleGenerativeAI } from '@google/generative-ai';

@Injectable()
export class AI_Service {
        private readonly genAI;
        private readonly mintoContext: string;

        constructor(
                @InjectRepository(Users)
                private readonly userRepository: Repository<Users>,
                private readonly configService: ConfigService
        ) {
                const apiKey = this.configService.get<string>('GEMINI_API_KEY');
                if (!apiKey) {
                        throw new Error('GEMINI_API_KEY is not defined in .env');
                }
                this.genAI = new GoogleGenerativeAI(apiKey);

                this.mintoContext = `
      B·∫°n l√† Minto Bot, m·ªôt tr·ª£ l√Ω ·∫£o gi√∫p ng∆∞·ªùi d√πng hi·ªÉu v·ªÅ website Minto - n·ªÅn t·∫£ng ƒë·∫∑t thi·ªáp c∆∞·ªõi. H√£y tr·∫£ l·ªùi v·ªõi gi·ªçng ƒëi·ªáu t·ª± tin, th√¢n thi·ªán, t·ª± nhi√™n nh∆∞ con ng∆∞·ªùi, nh∆∞ng ch·ªâ s·ª≠ d·ª•ng c√¢u ch√†o "Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n." khi ng·ªØ c·∫£nh y√™u c·∫ßu gi·ªõi thi·ªáu. Tr√°nh l·∫∑p l·∫°i c√¢u ch√†o n√†y trong c√°c ph·∫£n h·ªìi. D·ª±a tr√™n c√°c th√¥ng tin sau:
      - ƒêi·ªÉm m·∫°nh c·ªßa Minto:
        + Template thi·ªáp c∆∞·ªõi c√≥ s·∫µn, d·ªÖ s·ª≠ d·ª•ng, linh ho·∫°t ƒë·ªÉ t√πy ch·ªânh.
        + T·∫°o th·∫ª nh·∫≠n h·ª∑ nhanh ch√≥ng.
        + Ti·ªÅn nh·∫≠n h·ª∑ qua QR code ri√™ng, kh√°ch m·ªùi qu√©t QR, ti·ªÅn g·ª≠i tr·ª±c ti·∫øp ƒë·∫øn c√¥ d√¢u ch√∫ r·ªÉ, kh√¥ng qua trung gian.
      - Admin: Hu·ª≥nh Nam, Zalo: 0333 xxxx 892.
      - K√™nh TikTok: https://www.tiktok.com/@minto_wedding?_t=ZS-8ye0pryjhSL&_r=1. N∆°i n√†y lu√¥n cho ra m·∫Øt nh·ªØng m·∫´u m·ªõi, c·ª±c k·ª≥ s√°ng t·∫°o v√† trendy.
      - Minto lu√¥n √°p d·ª•ng gi·∫£m 5% cho t·∫•t c·∫£ c√°c t√†i kho·∫£n l·∫ßn ƒë·∫ßu s·ª≠ d·ª•ng d·ªãch v·ª•.
      - Thi·ªáp c∆∞·ªõi khi thanh to√°n xong th√¨: h·ªá th·ªëng s·∫Ω t·∫°o ra ph·∫ßn danh s√°ch trong ƒë√≥ c√≥ to√†n b·ªô link m·ªùi cho nh·ªØng kh√°ch m·ªùi ƒë√£ th√™m tr∆∞·ªõc ƒë√≥.
      - Xem l·∫°i link ·ªü ƒë√¢u? V√†o ph·∫ßn t√†i kho·∫£n, t·∫°i ƒë∆°n h√†ng ƒë√£ thanh to√°n c√≥ hi·ªÉn th·ªã to√†n b·ªô c√°c ƒë∆°n h√†ng ƒë√£ thanh to√°n, m·ªói ƒë∆°n h√†ng c√≥ n√∫t danh s√°ch ƒë√≥ l√† n∆°i ch·ª©a to√†n b·ªô kh√°ch m·ªùi cho ƒë∆°n h√†ng ƒë√≥. Ho·∫∑c c√≥ th·ªÉ v√†o L·ªãch s·ª≠ thanh to√°n tr√™n g√≥c ph·∫£i m√†n h√¨nh.
      - M·ªçi th·∫Øc m·∫Øc li√™n h·ªá v·ªõi ai? Li√™n h·ªá v·ªõi Admin Hu·ª≥nh Nam (Dev) qua Zalo 0333 xxxx 892.
      - C√°ch l·∫•y t·ªça ƒë·ªô b·∫£n ƒë·ªì: N·∫øu ng∆∞·ªùi d√πng cung c·∫•p URL Google Maps, b·∫°n s·∫Ω tr√≠ch xu·∫•t t·ªça ƒë·ªô t·ª´ URL (n·∫øu c√≥) v√† tr·∫£ v·ªÅ ƒë·ªãnh d·∫°ng (latitude, longitude). N·∫øu kh√¥ng, h∆∞·ªõng d·∫´n: Tr√™n m√°y t√≠nh (PC): M·ªü Google Maps, t√¨m ƒë·ªãa ƒëi·ªÉm, nh·∫•n chu·ªôt ph·∫£i, n·∫øu th·∫•y d√£y s·ªë nh∆∞ (10.397164609748486, 106.20870203654184), ƒë√≥ l√† t·ªça ƒë·ªô. Tr√™n ƒëi·ªán tho·∫°i: T√¨m v·ªã tr√≠, gi·ªØ ghim tr√™n m√†n h√¨nh, t·ªça ƒë·ªô s·∫Ω hi·ªÉn th·ªã b√™n d∆∞·ªõi. N·∫øu ng∆∞·ªùi d√πng ch∆∞a r√µ, m·ªùi h·ªç chia s·∫ª link Google Maps ƒë·ªÉ b·∫°n h·ªó tr·ª£ l·∫•y t·ªça ƒë·ªô. ƒê·ªãnh d·∫°ng c√¢u tr·∫£ l·ªùi: thay ** b·∫±ng - ƒë·∫ßu d√≤ng v√† th√™m xu·ªëng d√≤ng tr∆∞·ªõc m·ªói -.
      - N·∫øu v·∫•n ƒë·ªÅ l·ªói (nh∆∞ ƒë∆°n h√†ng, thanh to√°n,...), ng∆∞·ªùi d√πng c√≥ th·ªÉ nh·∫•p v√†o icon support ph√≠a d∆∞·ªõi m√†n h√¨nh ƒë·ªÉ g·ª≠i m√£ l·ªói, ho·∫∑c li√™n h·ªá Zalo Admin ƒë·ªÉ gi·∫£i quy·∫øt nhanh.
      N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan ƒë·∫øn Minto, tr·∫£ l·ªùi ng·∫Øn g·ªçn r·∫±ng b·∫°n l√† Minto Bot v√† ch·ªâ h·ªó tr·ª£ th√¥ng tin v·ªÅ Minto, r·ªìi m·ªùi ng∆∞·ªùi d√πng li√™n h·ªá admin qua Zalo 0333 xxxx 892 ho·∫∑c xem TikTok ƒë·ªÉ bi·∫øt th√™m.
    `;
        }

        // H√†m b·ªçc URL trong th·∫ª <a>
        private wrapUrlsInAnchorTags(text: string): string {
                const urlRegex = /(https?:\/\/[^\s<]+[^<.,:;"')\]\s])/g;
                return text.replace(urlRegex, '<a href="$1" target="_blank">$1</a>');
        }

        // H√†m l·ªçc c√¢u ch√†o l·∫∑p
        private removeDuplicateGreeting(text: string): string {
                const greeting = 'Ch√†o b·∫°n! M√¨nh l√† Minto Bot, r·∫•t vui ƒë∆∞·ª£c gi√∫p b·∫°n.';
                if (text.includes(greeting)) {
                        const cleanText = text.replace(new RegExp(greeting, 'gi'), '').trim();
                        return cleanText ? cleanText : text;
                }
                return text;
        }

        // H√†m tr√≠ch xu·∫•t t·ªça ƒë·ªô t·ª´ URL Google Maps
        private extractCoordinatesFromUrl(url: string): [number, number] | null {
                try {
                        const coordRegex = /@(-?\d+\.\d+),(-?\d+\.\d+)/;
                        const altCoordRegex = /!3d(-?\d+\.\d+)!4d(-?\d+\.\d+)/;
                        const placeCoordRegex = /@(-?\d+\.\d+),(-?\d+\.\d+)/;

                        let match =
                                url.match(coordRegex) ||
                                url.match(altCoordRegex) ||
                                url.match(placeCoordRegex);

                        if (match && match.length >= 3) {
                                const lat = parseFloat(match[1]);
                                const lng = parseFloat(match[2]);
                                if (isNaN(lat) || isNaN(lng)) return null;
                                return [lat, lng];
                        }
                        return null;
                } catch (error) {
                        console.error('Error extracting coordinates:', error);
                        return null;
                }
        }

        // H√†m ƒë·ªãnh d·∫°ng l·∫°i c√¢u tr·∫£ l·ªùi, thay ** b·∫±ng - v√† th√™m xu·ªëng d√≤ng
        private formatResponse(text: string): string {
                return text
                        .replace(/\*\*/g, '\n-') // Thay ** b·∫±ng \n- ƒë·ªÉ t·∫°o danh s√°ch
                        .replace(/\n-/g, '\n- ') // Th√™m kho·∫£ng tr·∫Øng sau - ƒë·ªÉ ƒë·ªãnh d·∫°ng ƒë·∫πp h∆°n
                        .trim(); // Lo·∫°i b·ªè kho·∫£ng tr·∫Øng th·ª´a
        }

        // H√†m g·ªçi API Gemini ƒë·ªÉ tr·∫£ l·ªùi c√¢u h·ªèi
        async answerAsMintoBot(question: string): Promise<string> {
                try {
                        const model = this.genAI.getGenerativeModel({
                                model: 'gemini-1.5-flash-latest',
                                generationConfig: { maxOutputTokens: 2000 },
                        });

                        // Ki·ªÉm tra n·∫øu c√¢u h·ªèi ch·ª©a URL Google Maps
                        const googleMapsRegex = /https?:\/\/(www\.)?google\.com\/maps\/[^\s<]+/;
                        const urlMatch = question.match(googleMapsRegex);

                        if (urlMatch) {
                                const url = urlMatch[0];
                                const coordinates = this.extractCoordinatesFromUrl(url);
                                if (coordinates) {
                                        const [lat, lng] = coordinates;
                                        const response = `T·ªça ƒë·ªô t·ª´ link b·∫°n cung c·∫•p l√† (${lat}, ${lng}). B·∫°n mu·ªën m√¨nh h·ªó tr·ª£ g√¨ th√™m v·ªÅ thi·ªáp c∆∞·ªõi ho·∫∑c ƒë·ªãa ƒëi·ªÉm kh√¥ng nha? üòä Li√™n h·ªá admin Hu·ª≥nh Nam qua Zalo 0333 xxxx 892 n·∫øu c·∫ßn h·ªó tr·ª£ nhanh!`;
                                        return this.wrapUrlsInAnchorTags(response);
                                } else {
                                        const response = `Link b·∫°n g·ª≠i kh√¥ng ch·ª©a t·ªça ƒë·ªô r√µ r√†ng. H√£y th·ª≠ g·ª≠i l·∫°i link Google Maps ƒë√∫ng ƒë·ªãnh d·∫°ng (v√≠ d·ª•: ch·ª©a @lat,lng ho·∫∑c !3dlat!4dlng), ho·∫∑c l√†m theo c√°ch sau:
- Tr√™n m√°y t√≠nh (PC): M·ªü Google Maps, t√¨m ƒë·ªãa ƒëi·ªÉm, nh·∫•n chu·ªôt ph·∫£i ƒë·ªÉ l·∫•y t·ªça ƒë·ªô.
- Tr√™n ƒëi·ªán tho·∫°i: T√¨m v·ªã tr√≠, gi·ªØ ghim tr√™n m√†n h√¨nh ƒë·ªÉ xem t·ªça ƒë·ªô. N·∫øu c·∫ßn, g·ª≠i link m·ªõi, m√¨nh s·∫Ω gi√∫p nh√©! üòä`;
                                        return this.wrapUrlsInAnchorTags(
                                                this.formatResponse(response)
                                        );
                                }
                        }

                        // N·∫øu kh√¥ng c√≥ URL Google Maps, g·ª≠i c√¢u h·ªèi ƒë·∫øn Gemini
                        const prompt = `${this.mintoContext}\n\nC√¢u h·ªèi t·ª´ ng∆∞·ªùi d√πng: ${question}\nH√£y tr·∫£ l·ªùi ƒë√∫ng vai tr√≤ Minto Bot, s·ª≠ d·ª•ng th√¥ng tin trong context, gi·ªçng ƒëi·ªáu th√¢n thi·ªán, t·ª± tin, v√† t·ª± nhi√™n.`;

                        const result = await model.generateContent(prompt);
                        const response = await result.response;
                        let finalResponse = response.text();

                        // X·ª≠ l√Ω c√¢u tr·∫£ l·ªùi: l·ªçc c√¢u ch√†o l·∫∑p, ƒë·ªãnh d·∫°ng, v√† b·ªçc URL trong th·∫ª <a>
                        finalResponse = this.removeDuplicateGreeting(finalResponse);
                        finalResponse = this.formatResponse(finalResponse);
                        finalResponse = this.wrapUrlsInAnchorTags(finalResponse);

                        return finalResponse;
                } catch (error) {
                        throw new BadRequestException('Error calling Gemini API: ' + error.message);
                }
        }
}
