import { Column, Entity, ManyToOne, PrimaryColumn, JoinColumn } from 'typeorm';
import { Users } from './users.entity';

@Entity('Error_Feedbacks')
export class Error_Feedbacks {
        @PrimaryColumn({ type: 'int', comment: 'M√£ ƒë·ªãnh danh ph·∫£n h·ªìi l·ªói' })
        feedback_id: number;

        @ManyToOne(() => Users, (user) => user.errorFeedbacks, {
                nullable: false,
                onDelete: 'CASCADE',
                onUpdate: 'CASCADE',
        })
        @JoinColumn({ name: 'user_id' })
        user: Users;

        @Column({ type: 'text', nullable: false, comment: 'N·ªôi dung l·ªói m√† ng∆∞·ªùi d√πng g·∫∑p ph·∫£i' })
        error_message: string;

        @Column({ type: 'datetime', nullable: false, comment: 'Th·ªùi gian g·ª≠i ph·∫£n h·ªìi' })
        submitted_at: Date;

        @Column({
                type: 'varchar',
                length: 50,
                nullable: false,
                default: 'PENDING',
                comment: 'Tr·∫°ng th√°i x·ª≠ l√Ω (PENDING, RESOLVED, IGNORED)',
        })
        status: string;

        @Column({ type: 'datetime', nullable: true, comment: 'Th·ªùi gian gi·∫£i quy·∫øt l·ªói' })
        resolved_at: Date;

        @Column({ type: 'text', nullable: true, comment: 'Ghi ch√∫ gi·∫£i quy·∫øt l·ªói' })
        resolution_notes: string;

        // üü¢ Th√™m c·ªôt n√†y
        @Column({
                type: 'tinyint',
                width: 1,
                default: 0,
                nullable: false,
                comment: 'Tr·∫°ng th√°i xem th√¥ng b√°o (0 = ch∆∞a xem, 1 = ƒë√£ xem)',
        })
        is_read: number;
}
